global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	#ca-base /etc/ssl/certs
	#crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	#ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	#ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	#errorfile 400 /etc/haproxy/errors/400.http
	#errorfile 403 /etc/haproxy/errors/403.http
	#errorfile 408 /etc/haproxy/errors/408.http
	#errorfile 500 /etc/haproxy/errors/500.http
	#errorfile 502 /etc/haproxy/errors/502.http
	#errorfile 503 /etc/haproxy/errors/503.http
	#errorfile 504 /etc/haproxy/errors/504.http

frontend http
	bind *:80
	option forwardfor

	acl auth_server1 path_beg -i /auth ^\/[0-9a-z]*\/room\/.* 
	acl prefixed-with-jenkins  path_beg /jenkins/
	acl host-is-jenkins-example   hdr(host) eq jenkins.example.com

    acl is_websocket path_beg /
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws

	use_backend jenkins if host-is-jenkins-example prefixed-with-jenkins
	use_backend AuthServer	if auth_server1
    use_backend websockets if is_websocket

	default_backend AuthServer

backend jenkins
	server jenkins1 127.0.0.1:8080
	mode http
	reqrep ^([^\ :]*)\ /(.*) \1\ /\2
	acl response-is-redirect res.hdr(Location) -m found
	rspirep ^Location:\ (http|https)://127.0.0.1:8080/jenkins/(.*) Location:\ \1://jenkins.example.com/jenkins/\2 if response-is-redirect

backend AuthServer 
	balance roundrobin
	server host1 localhost:9000

backend websockets
    mode http
    balance leastconn
    cookie SERVERID insert indirect nocache
    server s1 localhost:9000 cookie s1 check inter 5000 fastinter 1000 rise 1 fall 1 weight 1
